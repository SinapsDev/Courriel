generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                  String           @id @default(cuid())
    name                String?
    email               String?          @unique
    emailVerified       DateTime?
    image               String?
    accounts            Account[]
    sessions            Session[]
    CreatedReceivedMail ReceivedMail[]
    CreatedSentMail     SentMail[]
    UserPermission      UserPermission[]

    @@map("users")
}

model UserPermission {
    id              String  @id @default(cuid())
    canAccess       Boolean
    isAdmin         Boolean
    canAdd          Boolean
    canDel          Boolean
    canEdit         Boolean
    canReadSent     Boolean
    canReadReceived Boolean
    user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId          String

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ReceivedMail {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    date        DateTime
    object      String
    sender      String
    importance  String
    filesUrls   String   @db.Text
    author      User     @relation(fields: [userId], references: [id])
    userId      String
    orderNumber String

    @@index([userId, orderNumber])
}

model SentMail {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    date        DateTime
    object      String
    receiver    String
    importance  String
    filesUrls   String   @db.Text
    author      User     @relation(fields: [userId], references: [id])
    userId      String
    orderNumber String

    @@index([userId, orderNumber])
}
